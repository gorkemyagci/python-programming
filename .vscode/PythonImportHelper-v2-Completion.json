[
    {
        "label": "square",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def square(x):\n    return x**2\nprint(square(5))\ndef calculate_sum(*args):\n    return \"Sum: \" + str(sum(args))\ncalculate_sum(1,2,3,4,5,6,7,8,9,10)\n# Ön tanımlı argümanlar\ndef sum(x = 0, y = 0):\n    return x + y\nprint(sum(5,6))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calculate_sum",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def calculate_sum(*args):\n    return \"Sum: \" + str(sum(args))\ncalculate_sum(1,2,3,4,5,6,7,8,9,10)\n# Ön tanımlı argümanlar\ndef sum(x = 0, y = 0):\n    return x + y\nprint(sum(5,6))\n# Arümanların sırası\ndef calculate(x,y,z):\n    return (x + y) * z",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def sum(x = 0, y = 0):\n    return x + y\nprint(sum(5,6))\n# Arümanların sırası\ndef calculate(x,y,z):\n    return (x + y) * z\n# print(calculate(x = 5, y = 6, z = 7))\n# When should we use functions?\n# print((40+25)/90)\ndef calculate(x,y,z):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calculate",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def calculate(x,y,z):\n    return (x + y) * z\n# print(calculate(x = 5, y = 6, z = 7))\n# When should we use functions?\n# print((40+25)/90)\ndef calculate(x,y,z):\n    return (x + y) / z\nprint(round(calculate(40,25,90),2))\nx = calculate(40,25,90)\nprint(x*2)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "calculate",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def calculate(x,y,z):\n    return (x + y) / z\nprint(round(calculate(40,25,90),2))\nx = calculate(40,25,90)\nprint(x*2)\n# Local and Global Variables\nx = 10 # Global variable\ny = 20 # Global variable\ndef test(x, y):\n    return x + y # Local variable",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def test(x, y):\n    return x + y # Local variable\ntest(5,6) # 11\n# how to access global variable in a function\nx = [] # Global variable\ndef add_item(y):\n    x.append(y) # Access the global variable\n    return x\n# CONTROL STRUCTURES\n# True - False",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "add_item",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def add_item(y):\n    x.append(y) # Access the global variable\n    return x\n# CONTROL STRUCTURES\n# True - False\nmax = 5000\nmax == 4000 # False\nmax == 5000 # True\n# if - else - elif\nage = 17",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "a = \"HELLO WORLD\"\nlen(a) # 11\n# upper & lower\na.upper() # HELLO WORLD\na.lower() # hello world\n# print(a.upper(), a.lower())\na.islower() # False\na.isupper() # True\n# replace\na.replace(\"WORLD\", \"PYTHON\") # HELLO PYTHON",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "text = \"   Hello World   \"\ntext.strip() # Hello World # Remove spaces\ntext = \"***Hello World***\"\ntext.strip(\"*\") # Hello World # Remove * characters\n# dir\ndir(a) # List of methods\na.capitalize() # Hello world\na.title() # Hello World\n# Substrings\na[0] # H",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "text = \"***Hello World***\"\ntext.strip(\"*\") # Hello World # Remove * characters\n# dir\ndir(a) # List of methods\na.capitalize() # Hello world\na.title() # Hello World\n# Substrings\na[0] # H\na[0:5] # HELLO\n# print(a[:3]) # HEL",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "name = \"John\"\nsurname = \"Doe\"\nage = 30\nhobbies = [\"Python\", \"JavaScript\", \"React\"]\nperson = \"{0} {1} is {2} years old and likes {3}\".format(name, surname, age, hobbies)\n# print(person)\n# type conversion\n#first_number = input(\"Enter a number: \")\n#second_number = input(\"Enter another number: \")\n#result = int(first_number) + int(second_number)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "surname",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "surname = \"Doe\"\nage = 30\nhobbies = [\"Python\", \"JavaScript\", \"React\"]\nperson = \"{0} {1} is {2} years old and likes {3}\".format(name, surname, age, hobbies)\n# print(person)\n# type conversion\n#first_number = input(\"Enter a number: \")\n#second_number = input(\"Enter another number: \")\n#result = int(first_number) + int(second_number)\n#print(result)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "age = 30\nhobbies = [\"Python\", \"JavaScript\", \"React\"]\nperson = \"{0} {1} is {2} years old and likes {3}\".format(name, surname, age, hobbies)\n# print(person)\n# type conversion\n#first_number = input(\"Enter a number: \")\n#second_number = input(\"Enter another number: \")\n#result = int(first_number) + int(second_number)\n#print(result)\nint(\"9\") # 9",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "hobbies",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "hobbies = [\"Python\", \"JavaScript\", \"React\"]\nperson = \"{0} {1} is {2} years old and likes {3}\".format(name, surname, age, hobbies)\n# print(person)\n# type conversion\n#first_number = input(\"Enter a number: \")\n#second_number = input(\"Enter another number: \")\n#result = int(first_number) + int(second_number)\n#print(result)\nint(\"9\") # 9\nfloat(\"9.2\") # 9.2",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "person = \"{0} {1} is {2} years old and likes {3}\".format(name, surname, age, hobbies)\n# print(person)\n# type conversion\n#first_number = input(\"Enter a number: \")\n#second_number = input(\"Enter another number: \")\n#result = int(first_number) + int(second_number)\n#print(result)\nint(\"9\") # 9\nfloat(\"9.2\") # 9.2\nfloat(9)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#first_number",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#first_number = input(\"Enter a number: \")\n#second_number = input(\"Enter another number: \")\n#result = int(first_number) + int(second_number)\n#print(result)\nint(\"9\") # 9\nfloat(\"9.2\") # 9.2\nfloat(9)\ntype(str(9)) # str\n# print()\n# print(\"Hello\", \"World\", sep = '_', end= \"!\\n\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#second_number",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#second_number = input(\"Enter another number: \")\n#result = int(first_number) + int(second_number)\n#print(result)\nint(\"9\") # 9\nfloat(\"9.2\") # 9.2\nfloat(9)\ntype(str(9)) # str\n# print()\n# print(\"Hello\", \"World\", sep = '_', end= \"!\\n\")\n# Data Structures",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "#result",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#result = int(first_number) + int(second_number)\n#print(result)\nint(\"9\") # 9\nfloat(\"9.2\") # 9.2\nfloat(9)\ntype(str(9)) # str\n# print()\n# print(\"Hello\", \"World\", sep = '_', end= \"!\\n\")\n# Data Structures\n# Lists []",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "nots",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "nots = [90,80,70] \n# print(type(nots))\nlist = [\"John\", 30, True, 9.2, [\"Python\", \"JavaScript\", \"React\"]]\n# print(type(list))\n# print(len(list))\n# Indexing\nlist[0] # John\ntype(list[1])\n# concatenation\nall_list = [nots, list]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "list = [\"John\", 30, True, 9.2, [\"Python\", \"JavaScript\", \"React\"]]\n# print(type(list))\n# print(len(list))\n# Indexing\nlist[0] # John\ntype(list[1])\n# concatenation\nall_list = [nots, list]\n# print(all_list[1])\nlist[:3] # ['John', 30, True]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "all_list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "all_list = [nots, list]\n# print(all_list[1])\nlist[:3] # ['John', 30, True]\nall_list[1][4][1] # JavaScript\nall_list[:1] # [[90, 80, 70]]\n# print(all_list[:1][0][0])\n# List Methods\nlist = [\"Ali\", \"Veli\", \"Görkem\"]\nlist[1] = \"Ahmet\" # Change the value\nlist[:len(list)] = \"Burak\", \"Mehmet\", \"Kemal\" # Change the values",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "list = [\"Ali\", \"Veli\", \"Görkem\"]\nlist[1] = \"Ahmet\" # Change the value\nlist[:len(list)] = \"Burak\", \"Mehmet\", \"Kemal\" # Change the values\n# Append\nlist.append(\"Veli\") # Add to the end of the list\nlist = list + [\"Görkem\"] # Add to the end of the list\n# print(dir(list))\nlist.append('Python')\nlist.remove('Python') # Remove the first occurrence of a value\n# Insert & Pop",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "list[1]",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "list[1] = \"Ahmet\" # Change the value\nlist[:len(list)] = \"Burak\", \"Mehmet\", \"Kemal\" # Change the values\n# Append\nlist.append(\"Veli\") # Add to the end of the list\nlist = list + [\"Görkem\"] # Add to the end of the list\n# print(dir(list))\nlist.append('Python')\nlist.remove('Python') # Remove the first occurrence of a value\n# Insert & Pop\nlist.insert(0,'Javascript') # Insert a value to a specific index",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "list[:len(list)]",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "list[:len(list)] = \"Burak\", \"Mehmet\", \"Kemal\" # Change the values\n# Append\nlist.append(\"Veli\") # Add to the end of the list\nlist = list + [\"Görkem\"] # Add to the end of the list\n# print(dir(list))\nlist.append('Python')\nlist.remove('Python') # Remove the first occurrence of a value\n# Insert & Pop\nlist.insert(0,'Javascript') # Insert a value to a specific index\nlist.pop(1) # Remove a value from a specific index",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "list = list + [\"Görkem\"] # Add to the end of the list\n# print(dir(list))\nlist.append('Python')\nlist.remove('Python') # Remove the first occurrence of a value\n# Insert & Pop\nlist.insert(0,'Javascript') # Insert a value to a specific index\nlist.pop(1) # Remove a value from a specific index\nlist.insert(10, \"React\") # If the index is greater than the length of the list, the value is added to the end of the list\nlist.insert(len(list), \"Test\") # Add to the end of the list\n# count",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "copy_list",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "copy_list = list.copy() # Shallow copy\nprint(copy_list)\n# extend\nlist.extend([\"a\",\"b\",10]) # Add multiple values to the end of the list\nprint(list)\n# index - find the index of a value\nlist.index(\"Veli\")\n# print(list.index(\"Veli\"))\n# reverse \nlist.reverse() # Reverse the list",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "numbers = [9,2,5,1,7,3,4,6,8]\nnumbers.sort() # Sort the list\nprint(numbers)\n# clear\nlist.clear() # Remove all items from the list\nprint(list)\n# Tuples - Immutable\nt = (\"Ali\",1,2,3,[10,20])\n# print(t)\nt = (\"item\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "t = (\"Ali\",1,2,3,[10,20])\n# print(t)\nt = (\"item\")\nt_1 = (\"item\",)\nprint(type(t)) # str\nprint(type(t_1)) # tupl\n# Dictionaries\nperson = {\n    \"name\": \"John\",\n    \"surname\": \"Doe\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "t = (\"item\")\nt_1 = (\"item\",)\nprint(type(t)) # str\nprint(type(t_1)) # tupl\n# Dictionaries\nperson = {\n    \"name\": \"John\",\n    \"surname\": \"Doe\",\n    \"age\": 30,\n    \"hobbies\": [\"Python\", \"JavaScript\", \"React\"]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "t_1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "t_1 = (\"item\",)\nprint(type(t)) # str\nprint(type(t_1)) # tupl\n# Dictionaries\nperson = {\n    \"name\": \"John\",\n    \"surname\": \"Doe\",\n    \"age\": 30,\n    \"hobbies\": [\"Python\", \"JavaScript\", \"React\"]\n}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "person = {\n    \"name\": \"John\",\n    \"surname\": \"Doe\",\n    \"age\": 30,\n    \"hobbies\": [\"Python\", \"JavaScript\", \"React\"]\n}\n# Dictionary - Choose a value\nperson[\"name\"] # John\nperson.get(\"name\") # John\n# print(person.get(\"hobbies\")[0]) # Python",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "person[\"job\"]",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "person[\"job\"] = \"Developer\" # Add a value\nperson[\"name\"] = \"Görkem\" # Update a value\n# print(person)\n# Data Structures - Set\nl = [\"a\",\"b\",123]\ns = set(l)\n # tuple to set\nt = (\"a\",\"ali\")\ns = set(t)\ntext = \"ali_ali2_ali3\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "person[\"name\"]",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "person[\"name\"] = \"Görkem\" # Update a value\n# print(person)\n# Data Structures - Set\nl = [\"a\",\"b\",123]\ns = set(l)\n # tuple to set\nt = (\"a\",\"ali\")\ns = set(t)\ntext = \"ali_ali2_ali3\"\nprint(set(text))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "l = [\"a\",\"b\",123]\ns = set(l)\n # tuple to set\nt = (\"a\",\"ali\")\ns = set(t)\ntext = \"ali_ali2_ali3\"\nprint(set(text))\n# set does't allow indexing\n# Set - Add a value - Remove a value\nl = [\"gelecegi\", \"yazanlar\"]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "s = set(l)\n # tuple to set\nt = (\"a\",\"ali\")\ns = set(t)\ntext = \"ali_ali2_ali3\"\nprint(set(text))\n# set does't allow indexing\n# Set - Add a value - Remove a value\nl = [\"gelecegi\", \"yazanlar\"]\ns = set(l)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "t = (\"a\",\"ali\")\ns = set(t)\ntext = \"ali_ali2_ali3\"\nprint(set(text))\n# set does't allow indexing\n# Set - Add a value - Remove a value\nl = [\"gelecegi\", \"yazanlar\"]\ns = set(l)\ns.add(\"ile\")\ns.add(\"2024\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "s = set(t)\ntext = \"ali_ali2_ali3\"\nprint(set(text))\n# set does't allow indexing\n# Set - Add a value - Remove a value\nl = [\"gelecegi\", \"yazanlar\"]\ns = set(l)\ns.add(\"ile\")\ns.add(\"2024\")\n# print(s)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "text = \"ali_ali2_ali3\"\nprint(set(text))\n# set does't allow indexing\n# Set - Add a value - Remove a value\nl = [\"gelecegi\", \"yazanlar\"]\ns = set(l)\ns.add(\"ile\")\ns.add(\"2024\")\n# print(s)\ns.add(\"ile\") # Doesn't add the same value",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "l = [\"gelecegi\", \"yazanlar\"]\ns = set(l)\ns.add(\"ile\")\ns.add(\"2024\")\n# print(s)\ns.add(\"ile\") # Doesn't add the same value\ns.remove(\"ile\") # Remove a value - If the value does not exist, it gives an error\ns.discard(\"ile\") # Remove a value - If the value does not exist, it does not give an error\n# Set - Union - Intersection - Difference\n# difference() - Returns the difference between two sets",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "s = set(l)\ns.add(\"ile\")\ns.add(\"2024\")\n# print(s)\ns.add(\"ile\") # Doesn't add the same value\ns.remove(\"ile\") # Remove a value - If the value does not exist, it gives an error\ns.discard(\"ile\") # Remove a value - If the value does not exist, it does not give an error\n# Set - Union - Intersection - Difference\n# difference() - Returns the difference between two sets\n# intersection() - Returns the intersection of two sets - & operator",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "set1",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "set1 = set([1,3,5])\nset2 = set([1,2,3])\nset1.difference(set2)\n# print(set1.difference(set2)) # {5}\n# print(set2.difference(set1)) # {2}\n# symmetric_difference\nset1.symmetric_difference(set2)\n# print(set1.symmetric_difference(set2)) # {2, 5}\n# intersection\nset1.intersection(set2) # {1,3} set1 & set2",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "set2",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "set2 = set([1,2,3])\nset1.difference(set2)\n# print(set1.difference(set2)) # {5}\n# print(set2.difference(set1)) # {2}\n# symmetric_difference\nset1.symmetric_difference(set2)\n# print(set1.symmetric_difference(set2)) # {2, 5}\n# intersection\nset1.intersection(set2) # {1,3} set1 & set2\n# print(set1.intersection(set2))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "x = calculate(40,25,90)\nprint(x*2)\n# Local and Global Variables\nx = 10 # Global variable\ny = 20 # Global variable\ndef test(x, y):\n    return x + y # Local variable\ntest(5,6) # 11\n# how to access global variable in a function\nx = [] # Global variable",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "x = 10 # Global variable\ny = 20 # Global variable\ndef test(x, y):\n    return x + y # Local variable\ntest(5,6) # 11\n# how to access global variable in a function\nx = [] # Global variable\ndef add_item(y):\n    x.append(y) # Access the global variable\n    return x",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "y = 20 # Global variable\ndef test(x, y):\n    return x + y # Local variable\ntest(5,6) # 11\n# how to access global variable in a function\nx = [] # Global variable\ndef add_item(y):\n    x.append(y) # Access the global variable\n    return x\n# CONTROL STRUCTURES",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "x = [] # Global variable\ndef add_item(y):\n    x.append(y) # Access the global variable\n    return x\n# CONTROL STRUCTURES\n# True - False\nmax = 5000\nmax == 4000 # False\nmax == 5000 # True\n# if - else - elif",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "max",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "max = 5000\nmax == 4000 # False\nmax == 5000 # True\n# if - else - elif\nage = 17\nrequired_age = 18\nif age >= required_age:\n    print(\"You can vote\")\nelif age < required_age and age > 0:\n    print(\"You can't vote\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "age = 17\nrequired_age = 18\nif age >= required_age:\n    print(\"You can vote\")\nelif age < required_age and age > 0:\n    print(\"You can't vote\")\nelse:\n    print(\"Invalid age\")\n# mini_app\nmax = 50000",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "required_age",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "required_age = 18\nif age >= required_age:\n    print(\"You can vote\")\nelif age < required_age and age > 0:\n    print(\"You can't vote\")\nelse:\n    print(\"Invalid age\")\n# mini_app\nmax = 50000\nstore_name = input(\"Enter the store name: \")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "max",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "max = 50000\nstore_name = input(\"Enter the store name: \")\nstore_sales = int(input(\"Enter the store sales: \"))\nif store_sales > max:\n    print(\"You won a bonus\")\nelif store_sales == max:\n    print(\"You won a bonus\")\nelse:\n    print(\"You didn't win a bonus\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "store_name",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "store_name = input(\"Enter the store name: \")\nstore_sales = int(input(\"Enter the store sales: \"))\nif store_sales > max:\n    print(\"You won a bonus\")\nelif store_sales == max:\n    print(\"You won a bonus\")\nelse:\n    print(\"You didn't win a bonus\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "store_sales",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "store_sales = int(input(\"Enter the store sales: \"))\nif store_sales > max:\n    print(\"You won a bonus\")\nelif store_sales == max:\n    print(\"You won a bonus\")\nelse:\n    print(\"You didn't win a bonus\")",
        "detail": "main",
        "documentation": {}
    }
]